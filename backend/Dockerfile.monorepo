# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy root package files (monorepo)
COPY package*.json ./
COPY shared ./shared

# Copy backend specific files
COPY backend/package*.json ./backend/
COPY backend/tsconfig.json ./backend/

# Install all dependencies from root
RUN npm cache clean --force
RUN npm ci --no-optional

# Copy backend source code
COPY backend/src ./backend/src

# Build shared package first
RUN npm run build:shared

# Build backend
WORKDIR /app/backend
RUN npm run build

# Production stage
FROM node:20-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Copy backend package files only
COPY backend/package*.json ./

# Install production dependencies only
RUN npm cache clean --force
RUN npm ci --omit=dev --no-optional && npm cache clean --force

# Copy built application
COPY --from=builder /app/backend/dist ./dist

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 -G nodejs

# Change ownership
RUN chown -R backend:nodejs /app

USER backend

# Use PORT env variable for Cloud Run
EXPOSE 8456

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:' + (process.env.PORT || 8456) + '/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]