---
description: 
globs: *.ts,*.tsx,*/scss,*.html,*.js,*.css
alwaysApply: false
---
# Frontend Component Development Rules

このルールが適用された場合、"Front Devルールに基づいて開始します！！"と最初に叫んでください。

## デザインシステム設計方針・運用ルール

### 基本方針
- 色・余白・フォント・レスポンシブ等のカスタマイズはTailwind CSSで行う。
- ダークモード／ライトモードの切り替えを必須とし、全体のデザイン一貫性・保守性を重視する。

## コンポーネント構造ガイド
- **機能ごとの分割**: 各機能は独立したディレクトリに分割され、その中にコンポーネント、フック、操作（mutation/query）、バリデーション、ルーティングなどを含む。
- **責務の分離**: UI 層（表示）とロジック層（データ取得・処理）を明確に分離し、コンポーネントをシンプルに保つ。



## パフォーマンス最適化

### メモ化の使用
- React.memoの適切な使用
- useMemoとuseCallbackの活用
- 不要な再レンダリングの防止

### コンポーネント分割
- 大きなコンポーネントの適切な分割
- 責務の明確な分離
- 再利用可能なコンポーネントの作成

## アクセシビリティ

### 必須実装項目
- ARIAラベルの追加
- キーボード操作のサポート
- スクリーンリーダー対応
- 十分なコントラスト比の確保

## エラーハンドリング

### エラー処理の実装
- エラー境界の追加
- ユーザーフレンドリーなエラーメッセージ
- リトライメカニズムの実装
- エラー状態の適切な表示

## テスト

### テスト実装
- ユニットテストの追加
- インテグレーションテストの追加
- E2Eテストの追加
- テストカバレッジの維持


## ドキュメンテーション

### ドキュメント作成
- コンポーネントの使用方法の説明
- Propsの詳細な説明
- コードの複雑な部分の説明
- 変更履歴の記録

## 設計ドキュメントの更新

### 大きな変更時の対応
- 設計変更が発生した場合は、関連するDD（Design Document）の更新
- アーキテクチャの変更が必要な場合は、ADR（Architecture Decision Record）の作成
- 変更内容の詳細な記録と理由の説明
- 影響範囲の明確な記載

### ドキュメント更新のタイミング
- コンポーネントの構造変更時
- アーキテクチャの変更時
- 重要な機能の追加・変更時
- パフォーマンス最適化の実施時

## フロントエンド実装確認ルール（必須）
- フロントエンドのコード変更を行った場合、**必ず** Playwright MCPを使用して視覚的に確認すること。
- コード変更が正しく適用され、意図した通りに表示・動作するか必ず確認すること。
- 確認するポイント：
  1. 実際にアプリケーションを起動し、正しいURL（ポート番号含む）で確認する
  2. コンポーネントが正しく表示されているか確認する
  3. ユーザー操作（クリック、入力など）が適切に機能するか確認する
  4. ライトモード/ダークモード両方で確認する
  5. レスポンシブ対応が必要な場合は複数の画面サイズで確認する
- 確認結果をタスクファイルに必ず記録し、スクリーンショットがあれば添付する。
- 確認せずにタスクを終了することは厳禁とする。
- 予期しない動作や表示の問題が見つかった場合は、必ず修正してから完了とすること。

